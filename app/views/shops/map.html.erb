<div>
  <div class="container mx-auto">
    <div class="flex flex-wrap">
      <div class="w-full lg:w-1/2 lg:mx-auto my-3">
          <div class="w-full">
            <div class="text-2xl font-bold p-3">マップ検索</div>
          </div>
          <div id="map" style="height: 400px; width: 100%;"></div>
          <div class="flex">
            <button onclick="updateSearch()" class="btn btn-primary hover:bg-custom-hover-brown text-white mt-3 mb-3">
                現在地で検索
            </button>
          </div>
        <div class="number-of-shops"></div> <!-- 件数を表示するための要素 -->
        <div class="shop-list"></div> <!-- ショップリストを表示するための要素 -->
      </div>
    </div>
  </div>
</div>


<script>
  let map
  let currentLocationMarker;
  let defaultLocation = { lat: 35.68978920591743, lng: 139.70055989948156 };
  let lat = defaultLocation.lat;
  let lng = defaultLocation.lng;
  let marker, markers = [];
  let shops = gon.shops;

  window.addEventListener('DOMContentLoaded', function() {
    if (!window.google || !window.google.maps) {
      loadScript(); // スクリプトをロード
    } else if (typeof map === 'undefined') {
      // マップが初期化されていなければ初期化
      initMap();
    }
  });

  // Maps JavaScript APIの読み込み
  function loadScript() {

    var existingScript = document.querySelector('script[src^="https://maps.googleapis.com/maps/api/js"]');
    if (!existingScript) {
      var script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${gon.google_maps_api_key}&callback=initMap`;
      script.async = true;
      script.defer = true;
      document.head.appendChild(script);
    }
  }

  // Mapの初期化
  function initMap() {
    const geocoder = new google.maps.Geocoder();
    const mapElement = document.getElementById('map');
    if (!mapElement) {
      console.error("Map element not found.");
      return;
    }

    map = new google.maps.Map(mapElement, {
      zoom: 12,
      streetViewControl: false, // ストリートビューのボタン非表示
      mapTypeControl: false, // 地図、航空写真のボタン非表示
      fullscreenControl: false, // フルスクリーンボタン非表示

    });

    // 現在地を取得
    showCurrentLocation();

    // 現在地をマーカーで表示
    addCurrentLocationMaker();

    // 現在地近辺のshopを検索・取得
    updateSearch();
  }

// 現在地を取得
function showCurrentLocation(){
  // 非同期処理のままだと、位置情報が取得される前に次の処理（現在地周辺のカフェの検索・取得）が実行されてしまうためPromiseを使って非同期処理の結果に応じて次の処理を実行するようにする
  return new Promise((resolve, reject) => {
    if (navigator.geolocation) {
      // ブラウザが位置情報の取得をサポートしている場合
      // 現在地を取得
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };

          if (map) {
            // マップの中心を設定
            map.setCenter(pos);
            currentLocationMarker.setPosition(pos);
            resolve(pos);  // 成功時に位置を返す
          } else {
            console.error("map is not initialized.");
            reject();
          }
        },
        () => {
          // 位置情報の取得に失敗した場合
          alert('位置情報の取得に失敗しました。');
          if (map) {
            // マップの中心をデフォルト位置に設定
            map.setCenter(defaultLocation);
            currentLocationMarker.setPosition(defaultLocation);
            resolve(defaultLocation);  // 失敗時はデフォルト位置を返す
          } else {
            console.error("map is not initialized.");
            reject();
          }
        }
      );
    } else {
      alert('お使いのブラウザでは位置情報の取得がサポートされていません。');
      if (map) {
        // サポートされていない場合もデフォルト位置に設定
        map.setCenter(defaultLocation);
        resolve(defaultLocation);
      } else {
        console.error("map is not initialized.");
        reject();
      }
    }
  });
}

  // 現在地をマーカーで表示
  function addCurrentLocationMaker() {

    // 現在地の位置が変わると複数のマーカが表示されてしまうため、マーカーが存在する場合は削除
    if (currentLocationMarker) {
      currentLocationMarker.setMap(null);
    }

    currentLocationMarker = new google.maps.Marker({
      map: map,
      position: map.getCenter(), // 初期位置をマップの中心に設定
      title: "現在地",
      zIndex: 9999 // カフェのマーカーと重なったときに現在地のマーカーが一番前面に表示するように設定
    });
  }


  // 現在地近辺のshopを検索・取得
  function updateSearch(){

    // 現在地を取得
    showCurrentLocation().then((pos) => {
    var centerLatLng = {
      latitude: pos.lat,
      longitude: pos.lng
    };

    // 現在地のマーカーを追加
    addCurrentLocationMaker();

    // 現在地近辺のshopデータを検索・取得
    fetch(`/shops/map.json?latitude=${centerLatLng.latitude}&longitude=${centerLatLng.longitude}`)
      .then(response => response.json())
      .then(data => {
        console.log(data); // デバッグ用にデータを出力
        clearShopMarkers(); // 既存のshopマーカーを削除
        addShopMarkers(data.shops); // 取得したデータでshopマーカーを追加
        updateNumberOfShops(data.shops); // 取得したデータで件数を更新
        updateShopList(data.shops); // 取得したデータでshopリストを更新
      })
      .catch(error => console.error('Error:', error));
    });
  }

  // shopマーカーを削除
  function clearShopMarkers() {
    markers.forEach(marker => {
      marker.setMap(null);
    });
    markers = [];
  }

  // shopマーカーを追加
  function addShopMarkers(data) {
    data.forEach(shop => {
      const marker = new google.maps.Marker({
        position: { lat: parseFloat(shop.latitude), lng: parseFloat(shop.longitude) },
        map: map,
        title: shop.name,
        icon: {
          url: "<%= asset_path('cafe_marker.png') %>", //カフェアイコン
          scaledSize: new google.maps.Size(50, 50) //サイズ
        }
      });

      const infoWindow = new google.maps.InfoWindow({
        content: '<div class="hover:text-yellow-500"><a href="/shops/' + shop.id + '">' + shop.name + '</a></div>'
      });

      marker.addListener("click", () => {
        infoWindow.open({
          anchor: marker,
          map,
        });
      });

      markers.push(marker);

    });
  }

  // innerHTMLを使って検索結果に応じて件数の表示を動的に更新
  function updateNumberOfShops(shops) {
    const numberOfShopsElement = document.querySelector('.number-of-shops');
    if (!numberOfShopsElement) {
      console.error("Number of shops element not found.");
      return;
    }
    numberOfShopsElement.textContent = `半径10km以内の検索結果: ${shops.length}件`;
  }

  // innerHTMLを使って取得したshopデータに応じてshopリストの表示を動的に更新
  function updateShopList(shops) {
    const shopListElement = document.querySelector('.shop-list');
    if (!shopListElement) {
      console.error("Shop list element not found.");
      return;
    }

    shopListElement.innerHTML = '';
    shops.forEach(shop => {
      const shopElement = document.createElement('div');

      <!-- TODO: ショップリストのデザインを修正（classListをcardだけでなく適当なものに設定, _shop.htmlとデザインを合わせる等） -->

      shopElement.classList.add('card');
      shopElement.innerHTML = `
        <div id="shop-id-${shop.id}" class="p-3">
          <div class="bg-white rounded shadow">
            <div class="flex items-center">
              <ul class="list-none mt-2">
                <li class="flex items-center space-x-2"><a href="/shops/${shop.id}">${shop.name}</a></li>
                <li class="flex items-center space-x-2">${shop.address}</li>
              </ul>
            </div>
          </div>
        </div>
      `;
      shopListElement.appendChild(shopElement);
    });
  }

  window.initMap = initMap;

  window.showCurrentLocation = showCurrentLocation;

</script>
