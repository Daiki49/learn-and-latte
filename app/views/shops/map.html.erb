<div>
  <div class="container mx-auto">
    <div class="flex flex-wrap">
      <!-- 大きい画面で横並びにするためにflex-rowを追加 -->
      <div class="w-full lg:mx-auto lg:flex lg:flex-row max-w-screen-xl lg:my-6">
        <!-- ショップリスト部分 -->
        <div class="w-full lg:w-2/5 lg:ml-6 mr-3">
          <div class="flex hidden md:block">
            <button onclick="updateSearch()" class="btn btn-primary hover:bg-custom-hover-brown text-white mb-3">
                現在地で検索
            </button>
          </div>
          <div class="hidden md:block number-of-shops  md:order-1 order-2"></div> <!-- 件数を表示するための要素 -->
          <div class="hidden md:block w-full h-full overflow-y-auto mt-3 h-[calc(100vh-300px)]">
              <ul class="shop-list"></ul> <!-- ショップリストを表示するための要素 -->
          </div>
        </div>
        <!-- マップ部分 -->
        <div id="map" class="h-[calc(100vh-200px)] lg:w-3/5"></div>
        <div class="md:hidden mx-auto flex justify-center my-2">
          <!-- 現在地で検索ボタン -->
          <button onclick="updateSearch()" class="btn btn-primary hover:bg-custom-hover-brown text-white p-2 text-sm">
            現在地で検索
          </button>
        </div>
      </div>
    </div>
  </div>
</div>


<script>
  let map
  let currentLocationMarker;
  let defaultLocation = { lat: 35.68978920591743, lng: 139.70055989948156 };
  let lat = defaultLocation.lat;
  let lng = defaultLocation.lng;
  let marker, markers = [];
  let shops = gon.shops;
  let currentInfoWindow = null;

  window.addEventListener("DOMContentLoaded", function() {
    if (!window.google || !window.google.maps) {
      loadMapScript(); // スクリプトをロード
    } else if (typeof map === 'undefined') {
      // マップが初期化されていなければ初期化
      initMap();
    }
  });

  // Maps JavaScript APIを非同期で読み込む
  function loadMapScript() {
      var script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${gon.google_maps_api_key}&callback=initMap`;
      script.async = true;
      script.defer = true;
      document.head.appendChild(script);
  }

  // GoogleMap初期化
  function initMap() {
    const geocoder = new google.maps.Geocoder();
    map = new google.maps.Map(document.getElementById('map'), {
      zoom: 12,
      streetViewControl: false, // ストリートビューのボタン非表示
      mapTypeControl: false, // 地図、航空写真のボタン非表示
      fullscreenControl: false, // フルスクリーンボタン非表示

    });

    // 現在地を取得
    showCurrentLocation();

    // 現在地をマーカーで表示
    addCurrentLocationMaker();

    // 現在地近辺のshopを検索・取得
    updateSearch();
  }

  // 現在地を取得
  function showCurrentLocation(){
    // 非同期処理のままだと、位置情報が取得される前に次の処理（現在地周辺のカフェの検索・取得）が実行されてしまうためPromiseを使って非同期処理の結果に応じて次の処理を実行するようにする
    return new Promise((resolve, reject) => {
      if (navigator.geolocation) {
        // ブラウザが位置情報の取得をサポートしている場合
        // 現在地を取得
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            };

            if (map) {
              // マップの中心を設定
              map.setCenter(pos);
              currentLocationMarker.setPosition(pos);
              resolve(pos);  // 成功時に位置を返す
            } else {
              console.error("map is not initialized.");
              reject();
            }
          },
          () => {
            // 位置情報の取得に失敗した場合
            alert('位置情報の取得に失敗しました。');
            if (map) {
              // マップの中心をデフォルト位置に設定
              map.setCenter(defaultLocation);
              currentLocationMarker.setPosition(defaultLocation);
              resolve(defaultLocation);  // 失敗時はデフォルト位置を返す
            } else {
              console.error("map is not initialized.");
              reject();
            }
          }
        );
      } else {
        alert('お使いのブラウザでは位置情報の取得がサポートされていません。');
        if (map) {
          // サポートされていない場合もデフォルト位置に設定
          map.setCenter(defaultLocation);
          resolve(defaultLocation);
        } else {
          console.error("map is not initialized.");
          reject();
        }
      }
    });
  }

  // 現在地をマーカーで表示
  function addCurrentLocationMaker() {

    // 現在地の位置が変わると複数のマーカが表示されてしまうため、マーカーが存在する場合は削除
    if (currentLocationMarker) {
      currentLocationMarker.setMap(null);
    }

    currentLocationMarker = new google.maps.Marker({
      map: map,
      position: map.getCenter(), // 初期位置をマップの中心に設定
      title: "現在地",
      zIndex: 9999 // カフェのマーカーと重なったときに現在地のマーカーが一番前面に表示するように設定
    });
  }


  // 現在地近辺のshopを検索・取得
  function updateSearch(){

    // 現在地を取得
    showCurrentLocation().then((pos) => {
    var centerLatLng = {
      latitude: pos.lat,
      longitude: pos.lng
    };

    // 現在地のマーカーを追加
    addCurrentLocationMaker();

    // 現在地近辺のshopデータを検索・取得
    fetch(`/shops/map.json?latitude=${centerLatLng.latitude}&longitude=${centerLatLng.longitude}`)
      .then(response => response.json())
      .then(data => {
        console.log(data); // デバッグ用にデータを出力
        clearShopMarkers(); // 既存のshopマーカーを削除
        addShopMarkers(data.shops); // 取得したデータでshopマーカーを追加
        updateNumberOfShops(data.shops); // 取得したデータで件数を更新
        updateShopList(data.shops); // 取得したデータでshopリストを更新
      })
      .catch(error => console.error('Error:', error));
    });
  }

  // shopマーカーを削除
  function clearShopMarkers() {
    markers.forEach(marker => {
      marker.setMap(null);
    });
    markers = [];
  }

  // shopマーカーを追加
  function addShopMarkers(data) {
    data.forEach(shop => {
      const marker = new google.maps.Marker({
        position: { lat: parseFloat(shop.latitude), lng: parseFloat(shop.longitude) },
        map: map,
        title: shop.name,
        icon: {
          url: "<%= asset_path('cafe_marker.png') %>", //カフェアイコン
          scaledSize: new google.maps.Size(50, 50) //サイズ
        }
      });

      // マーカーとリストのクリックイベントを紐づけられるようにマーカーにshop.idを付与
      marker.shopId = shop.id;

      // GoogleMapsAPIが複数回読み込まれることによるマップの不具合を回避するためTurboを無効化
      const infoWindow = new google.maps.InfoWindow({
        content: '<div class="hover:text-yellow-500"><a href="/shops/' + shop.id + '" data-turbo="false">' + shop.name + '</a></div>'
      });

      marker.addListener("click", () => {

        // 他のマーカーを選択するとInfoWindowが増えてしまうため閉じる処理を追加
        if (currentInfoWindow) {
          currentInfoWindow.close();
        }
        infoWindow.open({
          anchor: marker,
          map,
        });
        // 現在のInfoWindowを更新
        currentInfoWindow = infoWindow;
        // リストの該当店舗をハイライト
        highlightShopInList(shop.id);
      });

      markers.push(marker);

    });
  }

  // リストの該当店舗をハイライト
  function highlightShopInList(shopId) {

    const shopElements = document.querySelectorAll('.shop-item');

    shopElements.forEach(el => {
      el.classList.remove('bg-custom-light-gray'); // 既存のハイライト削除
      if (el.dataset.shopId == shopId) {
        el.classList.add('bg-custom-light-gray'); // 該当店舗にハイライト
        el.scrollIntoView({ behavior: "smooth", block: "center" }); // スクロール
      }
    });
  }

  // リストのクリックイベントをセット
  function setupShopListEvents() {
    document.querySelectorAll('.shop-item').forEach(el => {
      el.addEventListener('click', () => {
        const shopId = el.dataset.shopId;
        const marker = markers.find(m => m.shopId == shopId);
        if (marker) {
          new google.maps.event.trigger(marker, "click"); // マーカーをクリックしたことにする
        }
      });
    });
  }

  // innerHTMLを使って検索結果に応じて件数の表示を動的に更新
  function updateNumberOfShops(shops) {
    const numberOfShopsElement = document.querySelector('.number-of-shops');
    if (!numberOfShopsElement) {
      console.error("Number of shops element not found.");
      return;
    }
    numberOfShopsElement.textContent = `半径10km以内の検索結果: ${shops.length}件`;
  }

  // innerHTMLを使って取得したshopデータに応じてshopリストの表示を動的に更新
  function updateShopList(shops) {
    const shopListElement = document.querySelector('.shop-list');
    if (!shopListElement) {
      console.error("Shop list element not found.");
      return;
    }

    shopListElement.innerHTML = '';
    shops.forEach(shop => {
      const shopElement = document.createElement('div');

      // GoogleMapsAPIが複数回読み込まれることによるマップの不具合を回避するためTurboを無効化
      shopElement.innerHTML = `
          <div class="shop-item w-full h-full flex-none" data-shop-id="${shop.id}">
            <div id="shop-id-${shop.id}" class="p-2 w-full snap-start snap-center"  data-shop-id="${shop.id}">
              <div class="bg-white rounded shadow">
                <ul class="w-full bg-white p-3 rounded-lg shadow-lg hover:bg-gray-50 text-sm md:text-lg">
                  <li class="flex items-center space-x-2 font-bold">
                    <a href="/shops/${shop.id}" data-turbo="false"  class="link link-primary">${shop.name}</a>
                  </li>
                  <li class="mt-2 text-gray-500 text-sm">${shop.address}</li>
                </ul>
              </div>
            </div>
          </div>
        `;
      shopListElement.appendChild(shopElement);
    });
    // リストのクリックイベントをセット
    setupShopListEvents();
  }

  window.initMap = initMap;

  window.showCurrentLocation = showCurrentLocation;

</script>
